4f486fdf (Justin McKnight        2022-10-04 13:19:28 -0400   5) 
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400   9) 	int indexFEN = 0, indexBoard = 56;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  10) 
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  11) 	allPieces = 0;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  20) 
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  21) 	//reading in board and setting bitboards
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  22) 	while(FEN[indexFEN] != ' '){
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  23) 		switch(FEN[indexFEN]){
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  37) 
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  38) 			case '/' : indexBoard -= 17; break;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  39) 			case '1' : break;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  40) 			case '2' : indexBoard++; break;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  41) 			case '3' : indexBoard += 2; break;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  42) 			case '4' : indexBoard += 3; break;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  43) 			case '5' : indexBoard += 4; break;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  44) 			case '6' : indexBoard += 5; break;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  45) 			case '7' : indexBoard += 6; break;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  46) 			case '8' : indexBoard += 7; break;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  47) 		}
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  48) 		indexFEN++;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  49) 		indexBoard++;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  50) 	}
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  55) 
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  56) 	//reading in who's turn it is
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  57) 	indexFEN++;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  60) 
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  61) 	//reading in castling rights
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  62) 	indexFEN += 2;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  63) 	whiteCastleRightsKS = false;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  64) 	whiteCastleRightsQS = false;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  65) 	blackCastleRightsKS = false;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  66) 	blackCastleRightsQS = false;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  67) 	while(FEN[indexFEN] != ' '){
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  68) 		switch(FEN[indexFEN]){
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  69) 			case 'K': whiteCastleRightsKS = true; break;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  70) 			case 'Q': whiteCastleRightsQS = true; break;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  71) 			case 'k': blackCastleRightsKS = true; break;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  72) 			case 'q': blackCastleRightsQS = true; break;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  73) 			case '-': break;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  74) 		}
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  75) 		indexFEN++;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  76) 	}
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  77) 	indexFEN++;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  78) 
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  79) 	//reading in en passant target square
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  80) 	enPassantTargetSquare = 0;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  81) 	if(FEN[indexFEN] != '-'){
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  82) 		enPassantTargetSquare = ((FEN[indexFEN + 1] - 49) * 8) + (FEN[indexFEN] - 97);
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  83) 		indexFEN++;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  84) 	}
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  85) 
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  86) 	//reading in half move clock
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  87) 	indexFEN += 2;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  88) 	string num = "";
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  89) 	while(FEN[indexFEN] != ' '){
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  90) 		num += FEN[indexFEN];
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  91) 		indexFEN++;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  92) 	}
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  93) 	halfMoveClock = stoi(num);
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  94) 
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  95) 	//reading in number of full moves
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  96) 	indexFEN++;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  97) 	num = "";
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400  99) 		num += FEN[indexFEN];
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 100) 		indexFEN++;
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 101) 	}
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 103) 	fullMoveNumber = stoi(num);
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 107) 	for(int r = 7; r >= 0; r--){
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 108) 		for(int c = 0; c < 8; c++){
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 109) 			if(bitBoard & (1ULL << ((r * 8) + c))) printf("1 ");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 110) 			else printf(". ");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 111) 		}
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 112) 		printf("\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 113) 	}
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 114) 	printf("\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 118) 	printf("All Pieces\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 119) 	printBitBoard(allPieces);
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 122) 	printf("White Pieces\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 124) 	printf("White King\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 126) 	printf("White Queen\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 128) 	printf("White Rooks\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 130) 	printf("White Bishops\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 132) 	printf("White Knights\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 134) 	printf("White Pawns\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 136) 	printf("Black Pieces\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 138) 	printf("Black King\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 140) 	printf("Black Queen\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 142) 	printf("Black Rooks\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 144) 	printf("Black Bishops\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 146) 	printf("Black Knights\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 148) 	printf("Black Pawns\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 151) 	else printf("Black's Turn\n");
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 152) 	printf("White Castle Rights KS: %d\n", whiteCastleRightsKS);
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 153) 	printf("White Castle Rights QS: %d\n", whiteCastleRightsQS);
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 154) 	printf("Black Castle Rights KS: %d\n", blackCastleRightsKS);
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 155) 	printf("Black Castle Rights QS: %d\n", blackCastleRightsQS);
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 156) 	printf("En Passant Target Square: %d\n", enPassantTargetSquare);
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 157) 	printf("Moves Since Last Capture or Pawn Advance: %d\n", halfMoveClock);
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 539) 		}
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 542) 
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 549) 		}
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 550) 
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 552) 
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 578) 		}
43a6454f (Justin Thomas Mcknight 2022-10-04 11:08:18 -0400 579) 	}
43a6454f (Justin Thomas Mc6585 (JMcknight              2022-10-11 15:59:14 -0400 102)
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 173) int Board::getMSBIndex(unsigned long long bitBoard){
7d78feaf (JMcknight              2022-10-11 17:34:20 -0400 174)         return 63 - __builtin_clzll(bitBoard);
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 175) }
1cb8a83d (JMcknight              2022-10-11 09:01:08 -0400 241)         unsigned long long king_moves;
fc6a6585 (JMcknight              2022-10-11 15:59:14 -0400 242)         int new_square;
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 299)         unsigned long long bishop_moves = 0;
fc6a6585 (JMcknight              2022-10-11 15:59:14 -0400 300)         int new_square;
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 308)         }
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 364)
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 403)
8bd0d43b (JMcknight              2022-10-13 08:13:23 -0400 426)     }
20a3862d (JMcknight75            2022-10-04 08:55:26 -0400 599) }

af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 600)
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 601) int Board::squareUnderAttack(int square){
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 602)         int new_square;
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 604)         //Knight
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 605)                 if((KNIGHT_LOOKUP_TBL[square] & pieceTypes[!color][4]) != 0) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 608)                 tmpBitBoard |= RAYS[square][1] ^ (pieces[color] & RAYS[square][1]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 614)                 tmpBitBoard |= RAYS[square][3] ^ (pieces[color] & RAYS[square][3]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 620)                 tmpBitBoard |= RAYS[square][5] ^ (pieces[color] & RAYS[square][5]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 626)                 tmpBitBoard |= RAYS[square][7] ^ (pieces[color] & RAYS[square][7]);
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 631)                 if((tmpBitBoard & pieceTypes[!color][3]) != 0 || (tmpBitBoard & pieceTy
pes[!color][1]) != 0) return 1;
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 632)
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 665)                 if(color){
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 666)                         if((pieceTypes[!color][5] & (1 << (square-9))) != 0 || (pieceTy
pes[!color][1] & (1 << (square-7)))) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 667)                 }else{
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 668)                         if((pieceTypes[!color][5] & (1 << (square+9))) != 0 || (pieceTy
pes[!color][1] & (1 << (square+7)))) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 669)                 }
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 670)
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 681)         }
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 696)         }
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 697)
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 715)         }
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 716)
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 723)
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 728)
Git
GitHub


Unstaged Changes
Stage All
test.txt
Staged Changes
Unstage All
See All Staged Changes

Commit message

Commit to main
72

Update jdixon34.md
Undo
1h

Update jdixon34.commits.txt
2h

Create jdixon34.commits.txt
2h

Create jdixon34.md
2h

added makeCastleMove() and undoCastleMove()
17h

Create jshoffn3.md
1d

Merge branch 'main' of https://github.com/utk-cs340-fall22/Chess
1d

Update jshoffn3.commits.txt
1d

Merge branch 'main' of github.com:utk-cs340-fall22/Chess
1d

filename
1d
sprint2/jmckni13.md1:1
LFUTF-8GitHub Markdown
mainFetchGitHubGit (1)
6585 (JMcknight              2022-10-11 15:59:14 -0400 102)
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 173) int Board::getMSBIndex(unsigned long long bitBoard){
7d78feaf (JMcknight              2022-10-11 17:34:20 -0400 174)         return 63 - __builtin_clzll(bitBoard);
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 175) }
1cb8a83d (JMcknight              2022-10-11 09:01:08 -0400 241)         unsigned long long king_moves;
fc6a6585 (JMcknight              2022-10-11 15:59:14 -0400 242)         int new_square;
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 299)         unsigned long long bishop_moves = 0;
fc6a6585 (JMcknight              2022-10-11 15:59:14 -0400 300)         int new_square;
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 308)         }
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 364)
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 403)
8bd0d43b (JMcknight              2022-10-13 08:13:23 -0400 426)     }
20a3862d (JMcknight75            2022-10-04 08:55:26 -0400 599) }

af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 600)
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 601) int Board::squareUnderAttack(int square){
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 602)         int new_square;
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 604)         //Knight
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 605)                 if((KNIGHT_LOOKUP_TBL[square] & pieceTypes[!color][4]) != 0) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 608)                 tmpBitBoard |= RAYS[square][1] ^ (pieces[color] & RAYS[square][1]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 614)                 tmpBitBoard |= RAYS[square][3] ^ (pieces[color] & RAYS[square][3]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 620)                 tmpBitBoard |= RAYS[square][5] ^ (pieces[color] & RAYS[square][5]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 626)                 tmpBitBoard |= RAYS[square][7] ^ (pieces[color] & RAYS[square][7]);
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 631)                 if((tmpBitBoard & pieceTypes[!color][3]) != 0 || (tmpBitBoard & pieceTy
pes[!color][1]) != 0) return 1;
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 632)
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 665)                 if(color){
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 666)                         if((pieceTypes[!color][5] & (1 << (square-9))) != 0 || (pieceTy
pes[!color][1] & (1 << (square-7)))) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 667)                 }else{
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 668)                         if((pieceTypes[!color][5] & (1 << (square+9))) != 0 || (pieceTy
pes[!color][1] & (1 << (square+7)))) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 669)                 }
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 670)
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 681)         }
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 696)         }
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 697)
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 715)         }
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 716)
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 723)
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 728)
Git
GitHub


Unstaged Changes
Stage All
test.txt
Staged Changes
Unstage All
See All Staged Changes

Commit message

Commit to main
72

Update jdixon34.md
Undo
1h

Update jdixon34.commits.txt
2h

Create jdixon34.commits.txt
2h

Create jdixon34.md
2h

added makeCastleMove() and undoCastleMove()
17h

Create jshoffn3.md
1d

Merge branch 'main' of https://github.com/utk-cs340-fall22/Chess
1d

Update jshoffn3.commits.txt
1d

Merge branch 'main' of github.com:utk-cs340-fall22/Chess
1d

filename
1d
sprint2/jmckni13.md1:1
LFUTF-8GitHub Markdown
mainFetchGitHubGit (1)
6585 (JMcknight              2022-10-11 15:59:14 -0400 102)
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 173) int Board::getMSBIndex(unsigned long long bitBoard){
7d78feaf (JMcknight              2022-10-11 17:34:20 -0400 174)         return 63 - __builtin_clzll(bitBoard);
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 175) }
1cb8a83d (JMcknight              2022-10-11 09:01:08 -0400 241)         unsigned long long king_moves;
fc6a6585 (JMcknight              2022-10-11 15:59:14 -0400 242)         int new_square;
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 299)         unsigned long long bishop_moves = 0;
fc6a6585 (JMcknight              2022-10-11 15:59:14 -0400 300)         int new_square;
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 308)         }
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 364)
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 403)
8bd0d43b (JMcknight              2022-10-13 08:13:23 -0400 426)     }
20a3862d (JMcknight75            2022-10-04 08:55:26 -0400 599) }

af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 600)
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 601) int Board::squareUnderAttack(int square){
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 602)         int new_square;
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 604)         //Knight
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 605)                 if((KNIGHT_LOOKUP_TBL[square] & pieceTypes[!color][4]) != 0) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 608)                 tmpBitBoard |= RAYS[square][1] ^ (pieces[color] & RAYS[square][1]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 614)                 tmpBitBoard |= RAYS[square][3] ^ (pieces[color] & RAYS[square][3]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 620)                 tmpBitBoard |= RAYS[square][5] ^ (pieces[color] & RAYS[square][5]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 626)                 tmpBitBoard |= RAYS[square][7] ^ (pieces[color] & RAYS[square][7]);
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 631)                 if((tmpBitBoard & pieceTypes[!color][3]) != 0 || (tmpBitBoard & pieceTy
pes[!color][1]) != 0) return 1;
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 632)
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 665)                 if(color){
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 666)                         if((pieceTypes[!color][5] & (1 << (square-9))) != 0 || (pieceTy
pes[!color][1] & (1 << (square-7)))) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 667)                 }else{
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 668)                         if((pieceTypes[!color][5] & (1 << (square+9))) != 0 || (pieceTy
pes[!color][1] & (1 << (square+7)))) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 669)                 }
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 670)
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 681)         }
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 696)         }
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 697)
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 715)         }
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 716)
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 723)
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 728)
Git
GitHub


Unstaged Changes
Stage All
test.txt
Staged Changes
Unstage All
See All Staged Changes

Commit message

Commit to main
72

Update jdixon34.md
Undo
1h

Update jdixon34.commits.txt
2h

Create jdixon34.commits.txt
2h

Create jdixon34.md
2h

added makeCastleMove() and undoCastleMove()
17h

Create jshoffn3.md
1d

Merge branch 'main' of https://github.com/utk-cs340-fall22/Chess
1d

Update jshoffn3.commits.txt
1d

Merge branch 'main' of github.com:utk-cs340-fall22/Chess
1d

filename
1d
sprint2/jmckni13.md1:1
LFUTF-8GitHub Markdown
mainFetchGitHubGit (1)
6585 (JMcknight              2022-10-11 15:59:14 -0400 102)
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 173) int Board::getMSBIndex(unsigned long long bitBoard){
7d78feaf (JMcknight              2022-10-11 17:34:20 -0400 174)         return 63 - __builtin_clzll(bitBoard);
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 175) }
1cb8a83d (JMcknight              2022-10-11 09:01:08 -0400 241)         unsigned long long king_moves;
fc6a6585 (JMcknight              2022-10-11 15:59:14 -0400 242)         int new_square;
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 299)         unsigned long long bishop_moves = 0;
fc6a6585 (JMcknight              2022-10-11 15:59:14 -0400 300)         int new_square;
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 308)         }
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 364)
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 403)
8bd0d43b (JMcknight              2022-10-13 08:13:23 -0400 426)     }
20a3862d (JMcknight75            2022-10-04 08:55:26 -0400 599) }

af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 600)
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 601) int Board::squareUnderAttack(int square){
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 602)         int new_square;
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 604)         //Knight
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 605)                 if((KNIGHT_LOOKUP_TBL[square] & pieceTypes[!color][4]) != 0) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 608)                 tmpBitBoard |= RAYS[square][1] ^ (pieces[color] & RAYS[square][1]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 614)                 tmpBitBoard |= RAYS[square][3] ^ (pieces[color] & RAYS[square][3]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 620)                 tmpBitBoard |= RAYS[square][5] ^ (pieces[color] & RAYS[square][5]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 626)                 tmpBitBoard |= RAYS[square][7] ^ (pieces[color] & RAYS[square][7]);
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 631)                 if((tmpBitBoard & pieceTypes[!color][3]) != 0 || (tmpBitBoard & pieceTy
pes[!color][1]) != 0) return 1;
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 632)
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 665)                 if(color){
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 666)                         if((pieceTypes[!color][5] & (1 << (square-9))) != 0 || (pieceTy
pes[!color][1] & (1 << (square-7)))) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 667)                 }else{
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 668)                         if((pieceTypes[!color][5] & (1 << (square+9))) != 0 || (pieceTy
pes[!color][1] & (1 << (square+7)))) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 669)                 }
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 670)
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 681)         }
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 696)         }
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 697)
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 715)         }
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 716)
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 723)
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 728)
Git
GitHub


Unstaged Changes
Stage All
test.txt
Staged Changes
Unstage All
See All Staged Changes

Commit message

Commit to main
72

Update jdixon34.md
Undo
1h

Update jdixon34.commits.txt
2h

Create jdixon34.commits.txt
2h

Create jdixon34.md
2h

added makeCastleMove() and undoCastleMove()
17h

Create jshoffn3.md
1d

Merge branch 'main' of https://github.com/utk-cs340-fall22/Chess
1d

Update jshoffn3.commits.txt
1d

Merge branch 'main' of github.com:utk-cs340-fall22/Chess
1d

filename
1d
sprint2/jmckni13.md1:1
LFUTF-8GitHub Markdown
mainFetchGitHubGit (1)
6585 (JMcknight              2022-10-11 15:59:14 -0400 102)
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 173) int Board::getMSBIndex(unsigned long long bitBoard){
7d78feaf (JMcknight              2022-10-11 17:34:20 -0400 174)         return 63 - __builtin_clzll(bitBoard);
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 175) }
1cb8a83d (JMcknight              2022-10-11 09:01:08 -0400 241)         unsigned long long king_moves;
fc6a6585 (JMcknight              2022-10-11 15:59:14 -0400 242)         int new_square;
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 299)         unsigned long long bishop_moves = 0;
fc6a6585 (JMcknight              2022-10-11 15:59:14 -0400 300)         int new_square;
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 308)         }
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 364)
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 403)
8bd0d43b (JMcknight              2022-10-13 08:13:23 -0400 426)     }
20a3862d (JMcknight75            2022-10-04 08:55:26 -0400 599) }

af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 600)
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 601) int Board::squareUnderAttack(int square){
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 602)         int new_square;
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 604)         //Knight
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 605)                 if((KNIGHT_LOOKUP_TBL[square] & pieceTypes[!color][4]) != 0) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 608)                 tmpBitBoard |= RAYS[square][1] ^ (pieces[color] & RAYS[square][1]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 614)                 tmpBitBoard |= RAYS[square][3] ^ (pieces[color] & RAYS[square][3]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 620)                 tmpBitBoard |= RAYS[square][5] ^ (pieces[color] & RAYS[square][5]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 626)                 tmpBitBoard |= RAYS[square][7] ^ (pieces[color] & RAYS[square][7]);
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 631)                 if((tmpBitBoard & pieceTypes[!color][3]) != 0 || (tmpBitBoard & pieceTy
pes[!color][1]) != 0) return 1;
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 632)
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 665)                 if(color){
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 666)                         if((pieceTypes[!color][5] & (1 << (square-9))) != 0 || (pieceTy
pes[!color][1] & (1 << (square-7)))) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 667)                 }else{
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 668)                         if((pieceTypes[!color][5] & (1 << (square+9))) != 0 || (pieceTy
pes[!color][1] & (1 << (square+7)))) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 669)                 }
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 670)
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 681)         }
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 696)         }
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 697)
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 715)         }
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 716)
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 723)
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 728)
Git
GitHub


Unstaged Changes
Stage All
test.txt
Staged Changes
Unstage All
See All Staged Changes

Commit message

Commit to main
72

Update jdixon34.md
Undo
1h

Update jdixon34.commits.txt
2h

Create jdixon34.commits.txt
2h

Create jdixon34.md
2h

added makeCastleMove() and undoCastleMove()
17h

Create jshoffn3.md
1d

Merge branch 'main' of https://github.com/utk-cs340-fall22/Chess
1d

Update jshoffn3.commits.txt
1d

Merge branch 'main' of github.com:utk-cs340-fall22/Chess
1d

filename
1d
sprint2/jmckni13.md1:1
LFUTF-8GitHub Markdown
mainFetchGitHubGit (1)
6585 (JMcknight              2022-10-11 15:59:14 -0400 102)
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 173) int Board::getMSBIndex(unsigned long long bitBoard){
7d78feaf (JMcknight              2022-10-11 17:34:20 -0400 174)         return 63 - __builtin_clzll(bitBoard);
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 175) }
1cb8a83d (JMcknight              2022-10-11 09:01:08 -0400 241)         unsigned long long king_moves;
fc6a6585 (JMcknight              2022-10-11 15:59:14 -0400 242)         int new_square;
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 299)         unsigned long long bishop_moves = 0;
fc6a6585 (JMcknight              2022-10-11 15:59:14 -0400 300)         int new_square;
a36a7cd8 (JMcknight              2022-10-11 13:58:29 -0400 308)         }
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 364)
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 403)
8bd0d43b (JMcknight              2022-10-13 08:13:23 -0400 426)     }
20a3862d (JMcknight75            2022-10-04 08:55:26 -0400 599) }

af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 600)
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 601) int Board::squareUnderAttack(int square){
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 602)         int new_square;
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 604)         //Knight
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 605)                 if((KNIGHT_LOOKUP_TBL[square] & pieceTypes[!color][4]) != 0) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 608)                 tmpBitBoard |= RAYS[square][1] ^ (pieces[color] & RAYS[square][1]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 614)                 tmpBitBoard |= RAYS[square][3] ^ (pieces[color] & RAYS[square][3]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 620)                 tmpBitBoard |= RAYS[square][5] ^ (pieces[color] & RAYS[square][5]);
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 626)                 tmpBitBoard |= RAYS[square][7] ^ (pieces[color] & RAYS[square][7]);
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 631)                 if((tmpBitBoard & pieceTypes[!color][3]) != 0 || (tmpBitBoard & pieceTy
pes[!color][1]) != 0) return 1;
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 632)
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 665)                 if(color){
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 666)                         if((pieceTypes[!color][5] & (1 << (square-9))) != 0 || (pieceTy
pes[!color][1] & (1 << (square-7)))) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 667)                 }else{
0669c067 (JMcknight              2022-10-25 13:24:23 -0400 668)                         if((pieceTypes[!color][5] & (1 << (square+9))) != 0 || (pieceTy
pes[!color][1] & (1 << (square+7)))) return 1;
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 669)                 }
4d48537c (JMcknight              2022-10-25 08:54:03 -0400 670)
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 681)         }
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 696)         }
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 697)
b46f046a (JMcknight              2022-10-18 09:31:07 -0400 715)         }
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 716)
af0f21f3 (JMcknight              2022-10-18 09:13:31 -0400 723)
cc1aef05 (JMcknight              2022-10-25 08:26:29 -0400 728)
Git
GitHub


Unstaged Changes
Stage All
test.txt
Staged Changes
Unstage All
See All Staged Changes

Commit message

Commit to main
72

Update jdixon34.md
Undo
1h

Update jdixon34.commits.txt
2h

Create jdixon34.commits.txt
2h

Create jdixon34.md
2h

added makeCastleMove() and undoCastleMove()
17h

Create jshoffn3.md
1d

Merge branch 'main' of https://github.com/utk-cs340-fall22/Chess
1d

Update jshoffn3.commits.txt
1d

Merge branch 'main' of github.com:utk-cs340-fall22/Chess
1d

filename
1d
sprint2/jmckni13.md1:1
LFUTF-8GitHub Markdown
mainFetchGitHubGit (1)
D
B
C
knight 2022-10-04 11:08:18 -0400 597) 		}
